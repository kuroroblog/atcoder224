################################
# <方針>
# 9個の頂点に当てはまる、可能性のある数字(コマ)を全通り試して、答えを導き出す。
# 可能性のある数字(コマ)を全通り試して、TLE(時間)に間に合うのか? ⏩　 大丈夫。
# <全探索して問題ない理由>
# 1~9の数字(コマ)の中で、p1, p2, p3, ...に属さないもの(空の頂点)をxと置く。3 x 3のパズルだと考えて、各数字(コマ)((p1, p2, p3, ...), x)を、3 x 3のパズルに当てはめる。
# 3 x 3のパズルへ各数字(コマ)((p1, p2, p3, ...), x)が入る場合の数は9!。 ⏩ 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1 = 362880 ≒ 3 x 10の5乗なので問題ない。

# 無効グラフの情報は、2次元配列で管理する。Trueの場合遷移可能、Falseの場合遷移不可能。
# 場合の数の場合を、「数字の文字列」で管理する。数字の文字列の末尾の数字を、「空の頂点」とする。パズルの完成形を123456789にする。
# 例) : 215634987の場合、7が空の頂点。319624578の場合、8が空の頂点。
# ※ コメントを追記すると、TLEになりました。。コメントを全て消すと、ACできるのでご注意ください。🙇‍♂️
################################

# 標準入力を受けつける。
M = int(input())

# 無効グラフの情報を2次元配列で管理する。Trueの場合、遷移可能。Falseの場合、遷移不可能。
edges = []
# インデックスが0の箇所は利用しない。
for _ in range(10):
    edges.append([False] * 10)

for _ in range(M):
    u, v = map(int, input().split())
    edges[u][v] = True
    edges[v][u] = True

p = list(input().split())
for i in range(1, 10):
    tmp = str(i)
    # 空の頂点を探索して、末尾に数字として格納する。
    if not tmp in p:
        p.append(tmp)
# 場合の数の場合を、「数字の文字列」とする。
p = int(''.join(p))

# 現在探索すべき、場合(数字の文字列)情報を格納する。
current_vec = [p]
# 場合(数字の文字列)と場合の数の情報を格納する。
# p : 場合(数字の文字列), 0 : 場合の数
dist = {p: 0}

# 探索すべき場合(数字の文字列)情報がなくなるので、回し続ける。
while len(current_vec) != 0:
    # 次に探索すべき、場合(数字の文字列)情報を格納する。
    next_vec = []
    for p in current_vec:
        now = list(str(p))
        # 空の頂点の数字情報を格納する。
        emptyNum = int(now[8])
        for i in range(8):
            pos = int(now[i])
            # 空の頂点とある数字を元に、遷移できるか探索する。
            if edges[pos][emptyNum]:
                # 空の頂点と、遷移できる数字の入れ替えを行う。
                tmp = now[i]
                now[i] = now[8]
                now[8] = tmp

                next = int(''.join(now))
                # 一度探索した場合(数字の文字列)を再度探索しない。
                if not next in dist:
                    # 次に探索すべき、場合(数字の文字列)情報を格納する。
                    next_vec.append(next)
                    # 場合(数字の文字列)が見つかった、探索数を記録する。
                    dist[next] = dist[p] + 1

                # 後続処理のため、復元する。
                tmp = now[i]
                now[i] = now[8]
                now[8] = tmp
    vec = next_vec

# パズルの完成形を123456789にする。
goal = 123456789
if goal in dist:
    print(dist[goal])
else:
    print(-1)
